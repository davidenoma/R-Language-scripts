plot(x,y)
set.seed(10)
x <- rbinom(100,1,0.5)
x
e <- rnorm(100,0,2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x,y)
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3 * x
y <- rpois(100,exp(log.mu))
summary(y)
plot(x,y)
set.seed(1)
sample(1:10,4)
sample(letters,5)
sample(letters,5)
sample(letters,5)
sample(letters,5)
sample(letters,5)
sample(1:10)
sample(1:10)
sample(1:10,replace = T)
mean(rnorm(1000000))
mean(rnorm(99 ^ 99))
mean(rnorm(99 ** 99))
mean(rnorm(99 ** 99))
mean(rnorm(99))
99 ** 99
x <- 99 ** 99
mean(rnorm(x))
mean(rnorm(999999999999999999999999999999999))
mean(rnorm(9999))
system.time()
system.time(mean(rnorm(999999999999)))
system.time(mean(rnorm(9999)))
system.time(mean(rnorm(99999)))
system.time(mean(rnorm(999999)))
#Elapsed time > user time
system.time(readLines('goal.com'))
#Elapsed time > user time
system.time(readLines('https://goal.com'))
hil <- function (n){
i<- 1:n
1 /outer(i - 1, i , "+")
}
system.time(hil(1000))
x <- hil(1000)
system.time(svd(x))
numeric(100)
numeric(5)
numeric(rnorm(10,10))
numeric(rnorm(10,10,1))
numeric(1:10)
system.time({
n <- 1000
r <- numeric(n)
for (i in 1:n){
x <- rnorm(n)
r[i] <- mean(x)
}
})
Rprof()
summaryRprof()
sample.interval = 1000
str(Rprof)
l
set.seed(1)
rpois(5, 2)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
getwd()
outcome <- read.csv("C:/Users/kora/Downloads/Documents/outcome-of-care-measures.csv",
colClasses = "character" )
c
outome
outcome <- read.csv("C:/Users/kora/Downloads/Documents/outcome-of-care-measures.csv",
colClasses = "character" )
outcome
head(outcome)
ncol(outcome)
typeof(outcome)
nrow(outcome)
outcome[,11] <- as.numeric(outcome[,11])
hist(outcome[,11])
head(outcome$11)
head(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
head(outcome[,11])
names(outcome)
head(outcome$State)
head(outcome$Hospital.Name)
unique(outcome$Hospital.Name)
grep('Hospital',names(outcome))
names(outome)
names(outcome)
hosp_sort <- function(state,outcome){
#setting NA to be 0
rates[rates == "Not Available"] <- 0
index <- c(grep("^Hospital.*Death*", names(rates)))
mortality_rates <- rates[,c(2,7,index)]
names(mortality_rates)[3:5] <- c("heart attack", "heart failure", "pneumonia")
#Making rates numeric
mortality_rates[,3:5] <- apply(mortality_rates[,3:5],2,as.numeric)
mortality_rates[mortality_rates == 0] <- NA
selected_state <- mortality_rates[mortality_rates$State == state,]
order_selected <- arrange(selected_state, selected_state[,outcome], Hospital.Name, na.last=TRUE)
order_selected <- order_selected[complete.cases(order_selected[,outcome]),]
return(order_selected)
#na.omit(selected_state[order(c(selected_state[,outcome]), na.last = TRUE),])
}
biz[biz=="one"] <- 3
well <- function (){
biz[biz == "tw0"] <- 0
}
hosp_sort()
hosp_sort("AZ",'heart attack')
outcomes
outcome
outcome[outcome == "Not Available"]
outcome[outcome == "Not Availabl"]
nrow(outcome[outcome == "Not Available"] )''
nrow(outcome[outcome == "Not Available"] )
count.fields(outcome[outcome == "Not Available"] )
count.fields()
we <- outcome[outcome == "Not Available"]
we <- 0
grep("^Hospital.*Death*",names(outcome))
grep("Hospital.*Death*",names(outcome))
names(outcome)
apply(1:10, 1, print)
apply(1:10, 1, print())
complete.cases(1:10)
complete.cases(1:10)
complete.cases(NA)
complete.cases([NA,1,2,3,4])
bb <- (NA,1,2,3,4)
bb <- c(NA,1,2,3,4)
complete.cases(bb)
library(dyplt)
library(dyplr)
install.packages(dyplr)
library('dyplr')
install.packages('dyplr')
install.packages("dyplr")
> install_github("hadley/dplyr")
install_github("hadley/dplyr")
devtools::install_github("hadley/dplyr")
devtools::install_github("hadley/dplyr")
devtools::install_github("hadley/dplyr")
install.packages("rlang")
install.packages("rlang")
devtools::install_github("hadley/dplyr")
devtools::install_github("hadley/dplyr")
install.packages('rlabg')
install.packages('rlang')
install.packages("rlang")
devtools::install_github("hadley/dplyr")
devtools::install_github("hadley/dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
chicago <- readRDS('chicago')
chicago <- readRDS('chicago.rds')
dim(chicago)
str(chicago)
names(chicago)
subset <- select(chicago, city:date)
head(subset)
chic.f <- filter(chicago,pm25tmean2   > 30)
str(chic.f)
chic.f <- filter(chicago, pm25tmean2 > 30 & tmpd > 80)
select(chic.f, date, tmpd, pm25tmean2)
chicago <- arrange(chicago, date)
head(select(chicago, date, pm25tmean2), 3)
#sorting the dates in descending order
chicago <- arrange(chicago, desc(date))
chicago <- rename(chicago, dewpoint = dptp, pm25 = pm25tmean2)
head(chicago[, 1:5], 3)
chicago <- mutate(chicago, pm25detrend = pm25 - mean(pm25, na.rm = TRUE))
#with air pollution data, we often want to detrend the data by subtracting the mean from the data.
chicago <- mutate(chicago, pm25detrend = pm25 - mean(pm25, na.rm = TRUE))
arrange(chicago,chicago[,"date"])
arrange(chicago,chicago[,"date"],pm25)
arrange(chicago,chicago[,"date"],pm25,na.last=TRUE)
str(arrange)
summary(arrange)
subOutcomes <- df[sample(nrow(outcomes), 20), ]
subOutcomes <- df[sample(nrow(outcome), 20), ]
subOutcomes <- df[sample(nrow(outcome), 20), ]
typeof(outcome)
sample(nrow(outcome))
sample(nrow(outcome),10)
data.frame(sample(nrow(outcome),10))
outcomeFrame <- as.data.frame(outcome)
View(outcomeFrame)
subOutcomes <- df[sample(nrow(outcomeFrame), 20), ]
subOutcomes <- outcomeFrame[sample(nrow(outcomeFrame), 20), ]
subOutcomes2 <- outcome[sample(nrow(outcome), 20), ]
arrange(subOutcomes,date,state)
subOutcomes2[subOutcomes2 == "Not Available"] <- 0
index <- c(grep("^Hospital.*Death*", names(subOutcomes2)))
mortality_rates <- rates[,c(2,7,index)]
subOutcomes2[subOutcomes2 == "Not Available"] <- 0
index <- c(grep("^Hospital.*Death*", names(subOutcomes2)))
mortality_rates <- outcomes[,c(2,7,index)]
subOutcomes2[subOutcomes2 == "Not Available"] <- 0
index <- c(grep("^Hospital.*Death*", names(subOutcomes2)))
mortality_rates <- subOutcomes2[,c(2,7,index)]
names(mortality_rates)[3:5] <- c("heart attack", "heart failure", "pneumonia")
mortality_rates[,3:5] <- apply(mortality_rates[,3:5],2,as.numeric)
index
mortality_rates[,3:5] <- apply(mortality_rates[,3:5],2,as.numeric)
names(mortality_rates)[3:5] <- c("heart attack", "heart failure", "pneumonia")
mortality_rates[,3:5] <- apply(mortality_rates[,3:5],2,as.numeric)
mortality_rates
mortality_rates[mortality_rates == 0] <- NA
texas <- mortality_rates[mortality_rates$State == "TX"]
texas <- mortality_rates[mortality_rates$State == "TX",]
TEXAS
texas
texas[,"pneumonia"]
arrange(texas,texas[,"TX"],Hospital.Name)
arrange(texas,texas[,"TX"],Hospital.Name,na.last=TRUE)
arrange(texas,texas[,"pneumonia"],Hospital.Name,na.last=TRUE)
arrange(texas,texas[,"pneumonia"],Hospital.Name)
texas
subOutcomes2 <- outcome[sample(nrow(outcome), 100), ]
subOutcomes2[subOutcomes2 == "Not Available"] <- 0
index <- c(grep("^Hospital.*Death*", names(subOutcomes2)))
mortality_rates <- subOutcomes2[,c(2,7,index)]
names(mortality_rates)[3:5] <- c("heart attack", "heart failure", "pneumonia")
mortality_rates[,3:5] <- apply(mortality_rates[,3:5],2,as.numeric)
mortality_rates[mortality_rates == 0] <- NA
texas <- mortality_rates[mortality_rates$State == "TX"]
texas <- mortality_rates[mortality_rates$State == "TX",]
texas
arrange(texas,texas[,"pneumonia"])
arrange(texas,texas[,"pneumonia"],Hospital.Name)
arrange(texas,texas[,"pneumonia"],Hospital.Name,na.last = T)
order_selected <- arrange(texas,texas[,"pneumonia"],Hospital.Name,na.last = T)
order_selected <- order_selected[complete.cases(order_selected[,"heart failure"])]
order_selected <- order_selected[complete.cases(order_selected[,"heart failure"]),]
order_selected
order_selected <- order_selected[complete.cases(order_selected[,"pneumonia"]),]
order_selected
arrange(texas,texas[,"heart failure"],Hospital.Name,na.last = T)
arrange(texas,texas[,"heart attack"],Hospital.Name,na.last = T)
best <- function(state, outcome) {
## Read outcome data
outcomes <- read.csv("C:/Users/kora/Downloads/Documents/outcome-of-care-measures.csv",
colClasses = "character" )
## Check that state and outcome are valid
if (!state %in% unique(outcomes$State))
return("Invalid State")
if (!outcome %in% c("heart attack", "heart failure", "pneumonia"))
return("Invalid Outcome")
## Return hospital name in that state with lowest 30-day death
order_selected <- hosp_sort(state,outcome)
## rate
return(order_selected[1,1])
}
hosp_sort <- function(state,outcome){
#setting NA to be 0
outcomes[outcomes == "Not Available"] <- 0
index <- c(grep("^Hospital.*Death*", names(outcomes)))
#this creates a dataframe for the mortality rates columns
mortality_rates <- outcomes[,c(2,7,index)]
#renaming the titles of the mortality rates in the new list
names(mortality_rates)[3:5] <- c("heart attack", "heart failure", "pneumonia")
#Making rates numeric
mortality_rates[,3:5] <- apply(mortality_rates[,3:5],2,as.numeric)
#Getting the morrality rates for the specified state in the function call.
mortality_rates[mortality_rates == 0] <- NA
selected_state <- mortality_rates[mortality_rates$State == state,]
#This applies they dplyr package method arrange to order the outcomes of the selected states.
#first it sorts by outcomeS by the selected state code and then according to the hospital name.
order_selected <- arrange(selected_state, selected_state[,outcome], Hospital.Name, na.last=TRUE)
order_selected <- order_selected[complete.cases(order_selected[,outcome]),]
return(order_selected)
#na.omit(selected_state[order(c(selected_state[,outcome]), na.last = TRUE),])
}
best("SC", "heart attack")
outcomes <- read.csv("C:/Users/kora/Downloads/Documents/outcome-of-care-measures.csv",
colClasses = "character" )
outcomes <- read.csv("C:/Users/kora/Downloads/Documents/outcome-of-care-measures.csv",
colClasses = "character" )
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
outcomes <- read.csv("C:/Users/kora/Downloads/Documents/outcome-of-care-measures.csv",
colClasses = "character" )
## Check that state and outcome are valid -> This check is achieved in the best and worst functions above.
if (num == "best")
return(best(state,outcome))
if (num == "worst")
return(worst(state,outcome))
else {
order_selected <- hosp_sort(state,outcome)
## Return hospital name in that state with the given rank
## 30-day death rate
return(order_selected[num,1])
}
}
rankhospital("NC", "heart attack", "worst")
worst <- function(state, outcome, st = "a") {
if (!state %in% unique(rates$State))
return("Invalid State")
if (!outcome %in% c("heart attack", "heart failure", "pneumonia"))
return("Invalid Outcome")
order_selected <- hosp_sort(state,outcome)
#This function returns the worst for the given outcome and state.
return(order_selected[nrow(order_selected),1])
}
rankhospital("NC", "heart attack", "worst")
rankhospital("NC", "heart attack", "worst")
traceback(())
traceback(
)
debug(rankhospital("NC", "heart attack", "worst"))
debug(rankhospital("NC", "heart attack", "worst"))
worst <- function(state, outcome, st = "a") {
if (!state %in% unique(outcomes$State))
return("Invalid State")
if (!outcome %in% c("heart attack", "heart failure", "pneumonia"))
return("Invalid Outcome")
order_selected <- hosp_sort(state,outcome)
#This function returns the worst for the given outcome and state.
return(order_selected[nrow(order_selected),1])
}
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
rankall <- function(outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
results <- unlist(lapply(sort(unique(rates$State)), rankhospital, outcome, num),use.names=FALSE)
hosp <- results[c(TRUE,FALSE)]
state <- results[c(FALSE,TRUE)]
all <- data.frame(hosp,state)
names(all) <- c("Hospital.Name", "state")
all
}
r <- rankall("heart attack", 4)
rankall <- function(outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
results <- unlist(lapply(sort(unique(outcomes$State)), rankhospital, outcome, num),use.names=FALSE)
hosp <- results[c(TRUE,FALSE)]
state <- results[c(FALSE,TRUE)]
all <- data.frame(hosp,state)
names(all) <- c("Hospital.Name", "state")
all
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r
rankall <- function(outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
results <- unlist(lapply(sort(unique(outcomes$State)), rankhospital, outcome, num),use.names=FALSE)
hosp <- results[c(TRUE,FALSE)]
state <- results[c(FALSE,TRUE)]
all <- data.frame(hosp,state)
names(all) <- c("Hospital.Name", "state")
all
}
r <- rankall("heart attack", 4)
r
outcomes <- read.csv("C:/Users/kora/Downloads/Documents/outcome-of-care-measures.csv",
colClasses = "character" )
hosp_sort <- function(state,outcome){
#setting NA to be 0
outcomes[outcomes == "Not Available"] <- 0
index <- c(grep("^Hospital.*Death*", names(outcomes)))
mortality_outcomes <- outcomes[,c(2,7,index)]
names(mortality_outcomes)[3:5] <- c("heart attack", "heart failure", "pneumonia")
#Making outcomes numeric
mortality_outcomes[,3:5] <- apply(mortality_outcomes[,3:5],2,as.numeric)
mortality_outcomes[mortality_outcomes == 0] <- NA
selected_state <- mortality_outcomes[mortality_outcomes$State == state,]
order_selected <- arrange(selected_state, selected_state[,outcome], Hospital.Name, na.last=TRUE)
order_selected <- order_selected[complete.cases(order_selected[,outcome]),]
return(order_selected)
#na.omit(selected_state[order(c(selected_state[,outcome]), na.last = TRUE),])
}
best <- function(state, outcome, st = "a") {
if (!state %in% unique(outcomes$State))
return("Invalid State")
if (!outcome %in% c("heart attack", "heart failure", "pneumonia"))
return("Invalid Outcome")
order_selected <- hosp_sort(state,outcome)
return(order_selected[1,c(1,2)])
}
worst <- function(state, outcome, st = "a") {
if (!state %in% unique(outcomes$State))
return("Invalid State")
if (!outcome %in% c("heart attack", "heart failure", "pneumonia"))
return("Invalid Outcome")
order_selected <- hosp_sort(state,outcome)
return(order_selected[nrow(order_selected),c(1,2)])
}
rankhospital <- function(state, outcome, num = "best", st = "a"){
if (num == "best")
return(best(state,outcome))
if (num == "worst")
return(worst(state,outcome))
else {order_selected <- hosp_sort(state,outcome)
return(order_selected[num,c(1,2)])}
}
r <- rankall("heart attack", 4)
r
rankall <- function(outcome, num = "best") {
#print(lapply(unique(rates$State),hosp_sort, outcome))
results <- unlist(lapply(sort(unique(rates$State)), rankhospital, outcome, num),use.names=FALSE)
hosp <- results[c(TRUE,FALSE)]
state <- results[c(FALSE,TRUE)]
all <- data.frame(hosp,state)
names(all) <- c("Hospital.Name", "state")
all
}
r <- rankall("heart attack", 4)
rankall <- function(outcome, num = "best") {
#print(lapply(unique(rates$State),hosp_sort, outcome))
results <- unlist(lapply(sort(unique(outcomes$State)), rankhospital, outcome, num),use.names=FALSE)
hosp <- results[c(TRUE,FALSE)]
state <- results[c(FALSE,TRUE)]
all <- data.frame(hosp,state)
names(all) <- c("Hospital.Name", "state")
all
}
r <- rankall("heart attack", 4)
r
as.character(subset(r, state == "HI")$hospital)
r
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
subset(r, state == "HI")$hospital
subset(r, state == "HI")$Hospital.Name
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$Hospital.Name)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "Nv")$Hospital.Name)
as.character(subset(r, state == "NV")$Hospital.Name)
read.table('C:/Users/kora/Downloads/Documents/snp_result (1).txt')
read.table('C:/Users/kora/Downloads/Documents/snp_result (1).txt',sep="\t")
results <- read.table('C:/Users/kora/Downloads/Documents/snp_result (1).txt',sep="\t")
head(results)
View(results)
names(results)
results['v5']
results[,'v5']
results[,5]
unique(results[,8])
results_snps <- cbind(results[,5],results[,8])
results_snps
names(results_snps) <- c("snps","function_class")
head(results_snps)
names(results_snps)
View(results_snps)
names(results_snps)[1:2] <- c("snp","function_class")
names(results_snps)
install.packages('vcfr')
install.packages('vcfr')
install.packages('vcfR')
library(vcfR)
results_vcf <- read.vcfR("C:/Users/kora/Desktop/Phd-bioinformatics/Omega/Popluation Genetics and GWAS/Assignment/22.36649117-36663577.ALL.chr22_GRCh38.genotypes.20170504.vcf")
head(results_vcf)
typeof(results_vcf)
View(results_vcf)
rv <- results_vcf
names(RV)
names(rv)
rv[1]
rv[1,]
rv[1,1]
rv[,2]
rv
names(results_vcf)
results_vcf[,1]
results_vcf[,2]
results_vcf
head(results_vcf)
rv@meta
rv@fix
metadata <- rv@meta
typeof(metadata)
fix_vcf <- rv@fix
names(fix_vcf)
typeof(fix_vcf)
head(fix_vcf)
results_vcf@fix
head(fix_vcf)
head(results_vcf@fix)
results_vcf@fix[1,]
gtvcf <- results_vcf@gt
head(gtvcf)
